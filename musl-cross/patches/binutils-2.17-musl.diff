diff --git a/bfd/aclocal.m4 b/bfd/aclocal.m4
--- a/bfd/aclocal.m4
+++ b/bfd/aclocal.m4
@@ -221,7 +221,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
diff --git a/bfd/configure b/bfd/configure
--- a/bfd/configure
+++ b/bfd/configure
@@ -3036,7 +3036,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
@@ -4401,14 +4401,14 @@
    esac
 fi;
 
-# Enable -Werror by default when using gcc
+# Enable  by default when using gcc
 if test "${GCC}" = yes -a -z "${ERROR_ON_WARNING}" ; then
     ERROR_ON_WARNING=yes
 fi
 
 NO_WERROR=
 if test "${ERROR_ON_WARNING}" = yes ; then
-    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS -Werror"
+    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS "
     NO_WERROR="-Wno-error"
 fi
 
diff --git a/bfd/warning.m4 b/bfd/warning.m4
--- a/bfd/warning.m4
+++ b/bfd/warning.m4
@@ -11,14 +11,14 @@
      *) AC_MSG_ERROR(bad value ${enableval} for --enable-werror) ;;
    esac])
 
-# Enable -Werror by default when using gcc
+# Enable  by default when using gcc
 if test "${GCC}" = yes -a -z "${ERROR_ON_WARNING}" ; then
     ERROR_ON_WARNING=yes
 fi
 
 NO_WERROR=
 if test "${ERROR_ON_WARNING}" = yes ; then
-    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS -Werror"
+    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS "
     NO_WERROR="-Wno-error"
 fi
 		   
diff --git a/binutils/Makefile.am b/binutils/Makefile.am
--- a/binutils/Makefile.am
+++ b/binutils/Makefile.am
@@ -265,7 +265,7 @@
 rcparse.h: rcparse.c
 sysinfo.h: sysinfo.c
 
-# Disable -Werror, if it has been enabled, since old versions of bison/
+# Disable , if it has been enabled, since old versions of bison/
 # yacc will produce working code which contain compile time warnings. 
 arparse.o:
 	$(COMPILE) -c $< $(NO_WERROR)
diff --git a/binutils/Makefile.in b/binutils/Makefile.in
--- a/binutils/Makefile.in
+++ b/binutils/Makefile.in
@@ -1049,7 +1049,7 @@
 rcparse.h: rcparse.c
 sysinfo.h: sysinfo.c
 
-# Disable -Werror, if it has been enabled, since old versions of bison/
+# Disable , if it has been enabled, since old versions of bison/
 # yacc will produce working code which contain compile time warnings. 
 arparse.o:
 	$(COMPILE) -c $< $(NO_WERROR)
diff --git a/binutils/aclocal.m4 b/binutils/aclocal.m4
--- a/binutils/aclocal.m4
+++ b/binutils/aclocal.m4
@@ -221,7 +221,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
diff --git a/binutils/configure b/binutils/configure
--- a/binutils/configure
+++ b/binutils/configure
@@ -3032,7 +3032,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
@@ -4191,14 +4191,14 @@
    esac
 fi;
 
-# Enable -Werror by default when using gcc
+# Enable  by default when using gcc
 if test "${GCC}" = yes -a -z "${ERROR_ON_WARNING}" ; then
     ERROR_ON_WARNING=yes
 fi
 
 NO_WERROR=
 if test "${ERROR_ON_WARNING}" = yes ; then
-    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS -Werror"
+    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS "
     NO_WERROR="-Wno-error"
 fi
 
diff --git a/config.sub b/config.sub
--- a/config.sub
+++ b/config.sub
@@ -119,7 +119,7 @@
 # Here we must recognize all the valid KERNEL-OS combinations.
 maybe_os=`echo $1 | sed 's/^\(.*\)-\([^-]*-[^-]*\)$/\2/'`
 case $maybe_os in
-  nto-qnx* | linux-gnu* | linux-dietlibc | linux-newlib* | linux-uclibc* | \
+  nto-qnx* | linux-gnu* | linux-dietlibc | linux-newlib* | linux-uclibc* | linux-musl* | \
   uclinux-uclibc* | uclinux-gnu* | kfreebsd*-gnu* | knetbsd*-gnu* | netbsd*-gnu* | \
   storm-chaos* | os2-emx* | rtmk-nova*)
     os=-$maybe_os
@@ -1207,7 +1207,7 @@
 	      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \
 	      | -chorusos* | -chorusrdb* \
 	      | -cygwin* | -pe* | -psos* | -moss* | -proelf* | -rtems* \
-	      | -mingw32* | -linux-gnu* | -linux-newlib* | -linux-uclibc* \
+	      | -mingw32* | -linux-gnu* | -linux-newlib* | -linux-uclibc* | -linux-musl* \
 	      | -uxpv* | -beos* | -mpeix* | -udk* \
 	      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \
 	      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \
diff --git a/config/depstand.m4 b/config/depstand.m4
--- a/config/depstand.m4
+++ b/config/depstand.m4
@@ -90,7 +90,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po >>conftest.err 2>&1 &&
        ${MAKE-make} -s -f confmf >>conftest.err 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
diff --git a/config/warnings.m4 b/config/warnings.m4
--- a/config/warnings.m4
+++ b/config/warnings.m4
@@ -65,11 +65,11 @@
 ])# ACX_PROG_CC_WARNING_ALMOST_PEDANTIC
 
 # ACX_PROG_CC_WARNINGS_ARE_ERRORS([x.y.z])
-#   sets WERROR to "-Werror" if the compiler is GCC >=x.y.z, or if
+#   sets WERROR to "" if the compiler is GCC >=x.y.z, or if
 #   --enable-werror-always was given on the command line, otherwise
 #   to nothing.
 #   If the argument is the word "manual" instead of a version number,
-#   then WERROR will be set to -Werror only if --enable-werror-always
+#   then WERROR will be set to  only if --enable-werror-always
 #   appeared on the configure command line.
 AC_DEFUN([ACX_PROG_CC_WARNINGS_ARE_ERRORS],
 [AC_REQUIRE([AC_PROG_CC])dnl
@@ -77,10 +77,10 @@
 WERROR=
 AC_ARG_ENABLE(werror-always, 
     AS_HELP_STRING([--enable-werror-always],
-		   [enable -Werror despite compiler version]),
+		   [enable  despite compiler version]),
 [], [enable_werror_always=no])
 AS_IF([test $enable_werror_always = yes],
-      [WERROR=-Werror],
+      [WERROR=],
  m4_if($1, [manual],,
  [AS_VAR_PUSHDEF([acx_GCCvers], [acx_cv_prog_cc_gcc_$1_or_newer])dnl
   AC_CACHE_CHECK([whether $CC is GCC >=$1], acx_GCCvers,
@@ -94,6 +94,6 @@
    [AS_VAR_SET(acx_GCCvers, yes)],
    [AS_VAR_SET(acx_GCCvers, no)])])
  AS_IF([test AS_VAR_GET(acx_GCCvers) = yes],
-       [WERROR=-WerrorB])
+       [WERROR=B])
   AS_VAR_POPDEF([acx_GCCvers])]))
 ])# ACX_PROG_CC_WARNINGS_ARE_ERRORS
diff --git a/configure b/configure
--- a/configure
+++ b/configure
@@ -42,7 +42,7 @@
   --enable-maintainer-mode enable make rules and dependencies not useful
                           (and sometimes confusing) to the casual installer"
 ac_help="$ac_help
-  --enable-werror         enable -Werror in bootstrap stage2 and later"
+  --enable-werror         enable  in bootstrap stage2 and later"
 ac_help="$ac_help
   --with-datarootdir	Use datarootdir as the data root directory."
 ac_help="$ac_help
@@ -7220,7 +7220,7 @@
 esac
 
 
-# Enable -Werror in bootstrap stage2 and later.
+# Enable  in bootstrap stage2 and later.
 # Change the default to "no" on release branches.
 # Check whether --enable-werror or --disable-werror was given.
 if test "${enable_werror+set}" = set; then
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -2373,10 +2373,10 @@
 esac
 AC_SUBST(stage1_cflags)
 
-# Enable -Werror in bootstrap stage2 and later.
+# Enable  in bootstrap stage2 and later.
 # Change the default to "no" on release branches.
 AC_ARG_ENABLE(werror,
-[  --enable-werror         enable -Werror in bootstrap stage2 and later], [],
+[  --enable-werror         enable  in bootstrap stage2 and later], [],
 [enable_werror=yes])
 case ${enable_werror} in
   yes) stage2_werror_flag="--enable-werror-always" ;;
diff --git a/gas/Makefile.am b/gas/Makefile.am
--- a/gas/Makefile.am
+++ b/gas/Makefile.am
@@ -601,7 +601,7 @@
 	if [ $$f = "m68k-parse.y" ]; then \
 	  rm -f m68k-parse.y; \
 	else true; fi
-# Disable -Werror, if it has been enabled, since old versions of bison/
+# Disable , if it has been enabled, since old versions of bison/
 # yacc will produce working code which contain compile time warnings. 
 m68k-parse.o: m68k-parse.c $(srcdir)/config/m68k-parse.h
 	$(COMPILE) -c $< $(NO_WERROR)
@@ -628,12 +628,12 @@
 
 itbl-lex.c: $(srcdir)/itbl-lex.l
 
-# Disable -Werror, if it has been enabled, since old versions of bison/
+# Disable , if it has been enabled, since old versions of bison/
 # yacc will produce working code which contain compile time warnings. 
 itbl-lex.o: itbl-lex.c itbl-parse.h $(srcdir)/itbl-lex.h
 	$(COMPILE) -c $< $(NO_WERROR)
 
-# Disable -Werror, if it has been enabled, since old versions of bison/
+# Disable , if it has been enabled, since old versions of bison/
 # yacc will produce working code which contain compile time warnings. 
 itbl-parse.o: itbl-parse.c itbl-parse.h $(srcdir)/itbl-ops.h $(srcdir)/itbl-lex.h
 	$(COMPILE) -c $< $(NO_WERROR)
diff --git a/gas/Makefile.in b/gas/Makefile.in
--- a/gas/Makefile.in
+++ b/gas/Makefile.in
@@ -2958,7 +2958,7 @@
 	if [ $$f = "m68k-parse.y" ]; then \
 	  rm -f m68k-parse.y; \
 	else true; fi
-# Disable -Werror, if it has been enabled, since old versions of bison/
+# Disable , if it has been enabled, since old versions of bison/
 # yacc will produce working code which contain compile time warnings. 
 m68k-parse.o: m68k-parse.c $(srcdir)/config/m68k-parse.h
 	$(COMPILE) -c $< $(NO_WERROR)
@@ -2985,12 +2985,12 @@
 
 itbl-lex.c: $(srcdir)/itbl-lex.l
 
-# Disable -Werror, if it has been enabled, since old versions of bison/
+# Disable , if it has been enabled, since old versions of bison/
 # yacc will produce working code which contain compile time warnings. 
 itbl-lex.o: itbl-lex.c itbl-parse.h $(srcdir)/itbl-lex.h
 	$(COMPILE) -c $< $(NO_WERROR)
 
-# Disable -Werror, if it has been enabled, since old versions of bison/
+# Disable , if it has been enabled, since old versions of bison/
 # yacc will produce working code which contain compile time warnings. 
 itbl-parse.o: itbl-parse.c itbl-parse.h $(srcdir)/itbl-ops.h $(srcdir)/itbl-lex.h
 	$(COMPILE) -c $< $(NO_WERROR)
diff --git a/gas/aclocal.m4 b/gas/aclocal.m4
--- a/gas/aclocal.m4
+++ b/gas/aclocal.m4
@@ -221,7 +221,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
diff --git a/gas/configure b/gas/configure
--- a/gas/configure
+++ b/gas/configure
@@ -3032,7 +3032,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
@@ -4193,14 +4193,14 @@
    esac
 fi;
 
-# Enable -Werror by default when using gcc
+# Enable  by default when using gcc
 if test "${GCC}" = yes -a -z "${ERROR_ON_WARNING}" ; then
     ERROR_ON_WARNING=yes
 fi
 
 NO_WERROR=
 if test "${ERROR_ON_WARNING}" = yes ; then
-    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS -Werror"
+    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS "
     NO_WERROR="-Wno-error"
 fi
 
diff --git a/gprof/aclocal.m4 b/gprof/aclocal.m4
--- a/gprof/aclocal.m4
+++ b/gprof/aclocal.m4
@@ -221,7 +221,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
diff --git a/gprof/configure b/gprof/configure
--- a/gprof/configure
+++ b/gprof/configure
@@ -3031,7 +3031,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
@@ -8466,14 +8466,14 @@
    esac
 fi;
 
-# Enable -Werror by default when using gcc
+# Enable  by default when using gcc
 if test "${GCC}" = yes -a -z "${ERROR_ON_WARNING}" ; then
     ERROR_ON_WARNING=yes
 fi
 
 NO_WERROR=
 if test "${ERROR_ON_WARNING}" = yes ; then
-    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS -Werror"
+    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS "
     NO_WERROR="-Wno-error"
 fi
 
diff --git a/include/gdb/callback.h b/include/gdb/callback.h
--- a/include/gdb/callback.h
+++ b/include/gdb/callback.h
@@ -255,7 +255,7 @@
   /* Callbacks for reading/writing memory (e.g. for read/write syscalls).
      ??? long or unsigned long might be better to use for the `count'
      argument here.  We mimic sim_{read,write} for now.  Be careful to
-     test any changes with -Wall -Werror, mixed signed comparisons
+     test any changes with -Wall , mixed signed comparisons
      will get you.  */
   int (*read_mem) PARAMS ((host_callback * /*cb*/, struct cb_syscall * /*sc*/,
 			   unsigned long /*taddr*/, char * /*buf*/,
diff --git a/ld/Makefile.am b/ld/Makefile.am
--- a/ld/Makefile.am
+++ b/ld/Makefile.am
@@ -429,7 +429,7 @@
 
 STAGESTUFF = *.o ldscripts/* e*.c
 
-# Disable -Werror, if it has been enabled, since old versions of bison/
+# Disable , if it has been enabled, since old versions of bison/
 # yacc will produce working code which contain compile time warnings. 
 ldgram.o:
 	$(COMPILE) -c $< $(NO_WERROR)
diff --git a/ld/Makefile.in b/ld/Makefile.in
--- a/ld/Makefile.in
+++ b/ld/Makefile.in
@@ -1251,7 +1251,7 @@
 	uninstall-man1
 
 
-# Disable -Werror, if it has been enabled, since old versions of bison/
+# Disable , if it has been enabled, since old versions of bison/
 # yacc will produce working code which contain compile time warnings. 
 ldgram.o:
 	$(COMPILE) -c $< $(NO_WERROR)
diff --git a/ld/aclocal.m4 b/ld/aclocal.m4
--- a/ld/aclocal.m4
+++ b/ld/aclocal.m4
@@ -221,7 +221,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
diff --git a/ld/configure b/ld/configure
--- a/ld/configure
+++ b/ld/configure
@@ -3034,7 +3034,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
@@ -4242,14 +4242,14 @@
    esac
 fi;
 
-# Enable -Werror by default when using gcc
+# Enable  by default when using gcc
 if test "${GCC}" = yes -a -z "${ERROR_ON_WARNING}" ; then
     ERROR_ON_WARNING=yes
 fi
 
 NO_WERROR=
 if test "${ERROR_ON_WARNING}" = yes ; then
-    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS -Werror"
+    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS "
     NO_WERROR="-Wno-error"
 fi
 
diff --git a/opcodes/aclocal.m4 b/opcodes/aclocal.m4
--- a/opcodes/aclocal.m4
+++ b/opcodes/aclocal.m4
@@ -221,7 +221,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
diff --git a/opcodes/configure b/opcodes/configure
--- a/opcodes/configure
+++ b/opcodes/configure
@@ -3039,7 +3039,7 @@
        grep sub/conftest.${OBJEXT-o} sub/conftest.Po > /dev/null 2>&1 &&
        ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
       # icc doesn't choke on unknown options, it will just issue warnings
-      # or remarks (even with -Werror).  So we grep stderr for any message
+      # or remarks (even with ).  So we grep stderr for any message
       # that says an option was ignored or not supported.
       # When given -MP, icc 7.0 and 7.1 complain thusly:
       #   icc: Command line warning: ignoring option '-M'; no argument required
@@ -4359,14 +4359,14 @@
    esac
 fi;
 
-# Enable -Werror by default when using gcc
+# Enable  by default when using gcc
 if test "${GCC}" = yes -a -z "${ERROR_ON_WARNING}" ; then
     ERROR_ON_WARNING=yes
 fi
 
 NO_WERROR=
 if test "${ERROR_ON_WARNING}" = yes ; then
-    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS -Werror"
+    GCC_WARN_CFLAGS="$GCC_WARN_CFLAGS "
     NO_WERROR="-Wno-error"
 fi
 
